
Thanks! Here's your finalized and fully structured project specification, reflecting everything you've shared:

ðŸ“ˆ NEPSE Forecasting Assistant â€” Classic Machine Learning (Desktop Version)

Goal

Build a reliable, modular ML-based assistant to predict NEPSE short-term trading signals (Buy / Hold / Sell) using daily floor sheet data and broker behavior, optimized for breakout identification and market momentum forecasting.

System Features

Input Data

Source: Multiple CSV files named as `floor_sheet_data_YYYY-MM-DD.csv`
Fields:
  `SN, ContractNo, Symbol, Buyer, Seller, Quantity, Rate, Amount`
Broker Codes: Numeric values (e.g., 1â€“58)
Symbols: Stock tickers (e.g., HIDCLP, RSDC)

Feature Engineering
Technical Indicators:
5-day Moving Average
14-day RSI
Volatility measures (rolling std)

Broker Behavior:
	Net Buy/Sell Strength
	Relative vs. Absolute metrics (user-selectable)
	Broker concentration

Modeling

Initial Model: Random Forest Classifier
Targets: Buy / Hold / Sell
Prediction Horizons(user-selectable):

  Next Day
  3-Day Return
  Weekly Return

Incremental Training

Training Frequency: Daily
Training Window Options:

  All Historical Data
  Rolling Window

Model Management

Save model checkpoints per date
 Log and store:

  Model version
  Training time
  Evaluation metrics (Accuracy, Precision, Recall, F1, Confusion Matrix)
Export evaluation results to CSV/JSON

Project Architecture


nepse_forecast_ClassicML/
â”‚
â”œâ”€â”€ src/
â”‚   â”œâ”€â”€ data/              # Load, preprocess, and manage floor sheet data
â”‚   â”œâ”€â”€ features/          # Feature engineering: indicators, broker behavior
â”‚   â”œâ”€â”€ models/            # Train/test models, save checkpoints
â”‚   â”œâ”€â”€ utils/             # Shared utilities, logger, config, etc.
â”‚   â”œâ”€â”€ pipeline.py        # Main training pipeline script
â”‚
â”œâ”€â”€ app/
â”‚   â””â”€â”€ streamlit_app.py   # Interactive dashboard with options for prediction horizon, feature mode
â”‚
â”œâ”€â”€ logs/                  # Training and error logs
â”œâ”€â”€ checkpoints/           # Saved model states per day
â”œâ”€â”€ metrics/               # CSV/JSON files storing evaluation metrics
â””â”€â”€ requirements.txt       # Dependencies`

Output

 Interactive Streamlit app with:

   Stock filter
   Prediction horizon selector
   Broker feature type (Relative/Absolute)
   Signal output (Buy / Hold / Sell)
   Visualized metrics and latest signal summary

Logging

Daily logs:

 Model version
 Training duration
 Evaluation results
 Errors or warnings

---

## âœ… Next Steps

I'll now help you build this piece-by-piece. Let's begin with:

Step 1: Folder & File Structure + Logger Setup

Would you like me to:

1. Generate the base folder layout and boilerplate files (empty functions/modules)?
2. Set up the logging utility?
3. Build a minimal data loader for `floor_sheet_data_*.csv` to start feature engineering?

Let me know which part you want to start with, or if you'd like all three in one go.
